plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
//    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
}

android {


    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.flutter_boilerplate_clean_architecture_bloc"
        minSdkVersion 24
        targetSdkVersion 35
        ndkVersion = "27.0.12077973"
        versionCode 100
        versionName '1.0.0'

    }

    buildTypes {
        release {

            signingConfig signingConfigs.debug
        }
    }
    namespace "com.example.flutter_boilerplate_clean_architecture_bloc"
}
flutter {
    source '../..'
}
dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5' // ho·∫∑c b·∫£n m·ªõi h∆°n
}

afterEvaluate {
    def currentDate = new Date().format("dd-MM-yyyy")
    def flutterProjectDir = rootProject.projectDir.parentFile
    def flutterProjectName = flutterProjectDir.name.split("-").first()
    def versionName = project.android.defaultConfig.versionName

    def flavorNames = []
    project.android.productFlavors.all { flavor ->
        flavorNames << flavor.name
    }
    flavorNames += [""] // default

    flavorNames.each { flavor ->
        def flavorCap = flavor.capitalize()
        def taskName = flavor ? "bundle${flavorCap}Release" : "bundleRelease"
        def outputDir = "$projectDir/${flavor}/release"
        def inputAab = file("$outputDir/app-${flavor ? flavor.toLowerCase() + "-" : ""}release.aab")
        def renamedAab = file("$outputDir/$flutterProjectName${flavor ? "-${flavor}" : ""}-v${versionName}-${currentDate}.aab")

        tasks.matching { it.name == taskName }.configureEach {
            doLast {
                if (inputAab.exists()) {
                    println "‚úÖ Renaming AAB: ${inputAab.name} ‚Üí ${renamedAab.name}"
                    inputAab.renameTo(renamedAab)

                    // T·ª± ƒë·ªông m·ªü th∆∞ m·ª•c ch·ª©a file AAB
                    def folderPath = renamedAab.parent
                    println "üìÇ Opening folder: $folderPath"

                    if (System.properties['os.name'].toLowerCase().contains('windows')) {
                        exec {
                            commandLine 'cmd', '/c', 'start', '', folderPath
                        }
                    } else if (System.properties['os.name'].toLowerCase().contains('mac')) {
                        exec {
                            commandLine 'open', folderPath
                        }
                    } else {
                        exec {
                            commandLine 'xdg-open', folderPath
                        }
                    }
                } else {
                    println "‚ùå AAB not found: ${inputAab}"
                }
            }
        }
    }
}
// ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
apply from: "flavorizr.gradle"
// ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----